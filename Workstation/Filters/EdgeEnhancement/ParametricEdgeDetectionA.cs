//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;

namespace L3.Cargo.Workstation.Filters.EdgeEnhancement
{
	
	/// <summary>Pixel shader: Edge detection using a parametric, symetric, directional convolution kernel</summary>
	public class ParametricEdgeDetectionA : ShaderEffect {
		public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(ParametricEdgeDetectionA), 0);
		public static readonly DependencyProperty ThreshholdProperty = DependencyProperty.Register("Threshhold", typeof(double), typeof(ParametricEdgeDetectionA), new UIPropertyMetadata(((double)(0.5)), PixelShaderConstantCallback(0)));
		public static readonly DependencyProperty K00Property = DependencyProperty.Register("K00", typeof(double), typeof(ParametricEdgeDetectionA), new UIPropertyMetadata(((double)(1)), PixelShaderConstantCallback(1)));
		public static readonly DependencyProperty K01Property = DependencyProperty.Register("K01", typeof(double), typeof(ParametricEdgeDetectionA), new UIPropertyMetadata(((double)(2)), PixelShaderConstantCallback(2)));
		public static readonly DependencyProperty K02Property = DependencyProperty.Register("K02", typeof(double), typeof(ParametricEdgeDetectionA), new UIPropertyMetadata(((double)(1)), PixelShaderConstantCallback(3)));
		public static readonly DependencyProperty TextureSizeProperty = DependencyProperty.Register("TextureSize", typeof(Point), typeof(ParametricEdgeDetectionA), new UIPropertyMetadata(new Point(512, 512), PixelShaderConstantCallback(4)));
		public static readonly DependencyProperty StartPointProperty = DependencyProperty.Register("StartPoint", typeof(Point), typeof(ParametricEdgeDetectionA), new UIPropertyMetadata(new Point(0, 0), PixelShaderConstantCallback(6)));
		public static readonly DependencyProperty EndPointProperty = DependencyProperty.Register("EndPoint", typeof(Point), typeof(ParametricEdgeDetectionA), new UIPropertyMetadata(new Point(0, 0), PixelShaderConstantCallback(7)));
		public ParametricEdgeDetectionA() {
			PixelShader pixelShader = new PixelShader();

            pixelShader.UriSource = new Uri(@"/L3Filter-EdgeEnhancement;component/ParametricEdgeDetectionA.ps", UriKind.Relative);
			this.PixelShader = pixelShader;

			this.UpdateShaderValue(InputProperty);
			this.UpdateShaderValue(ThreshholdProperty);
			this.UpdateShaderValue(K00Property);
			this.UpdateShaderValue(K01Property);
			this.UpdateShaderValue(K02Property);
			this.UpdateShaderValue(TextureSizeProperty);
			this.UpdateShaderValue(StartPointProperty);
			this.UpdateShaderValue(EndPointProperty);
		}
		public Brush Input {
			get {
				return ((Brush)(this.GetValue(InputProperty)));
			}
			set {
				this.SetValue(InputProperty, value);
			}
		}
		/// <summary>The threshold of the edge detection.</summary>
		public double Threshhold {
			get {
				return ((double)(this.GetValue(ThreshholdProperty)));
			}
			set {
				this.SetValue(ThreshholdProperty, value);
			}
		}
		/// <summary>Kernel first column top. Default is the Sobel operator.</summary>
		public double K00 {
			get {
				return ((double)(this.GetValue(K00Property)));
			}
			set {
				this.SetValue(K00Property, value);
			}
		}
		/// <summary>Kernel first column middle. Default is the Sobel operator.</summary>
		public double K01 {
			get {
				return ((double)(this.GetValue(K01Property)));
			}
			set {
				this.SetValue(K01Property, value);
			}
		}
		/// <summary>Kernel first column bottom. Default is the Sobel operator.</summary>
		public double K02 {
			get {
				return ((double)(this.GetValue(K02Property)));
			}
			set {
				this.SetValue(K02Property, value);
			}
		}
		/// <summary>The size of the texture.</summary>
		public Point TextureSize {
			get {
				return ((Point)(this.GetValue(TextureSizeProperty)));
			}
			set {
				this.SetValue(TextureSizeProperty, value);
			}
		}
		public Point StartPoint {
			get {
				return ((Point)(this.GetValue(StartPointProperty)));
			}
			set {
				this.SetValue(StartPointProperty, value);
			}
		}
		public Point EndPoint {
			get {
				return ((Point)(this.GetValue(EndPointProperty)));
			}
			set {
				this.SetValue(EndPointProperty, value);
			}
		}
	}
}
