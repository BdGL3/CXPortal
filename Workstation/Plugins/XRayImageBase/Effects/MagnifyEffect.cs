//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;

namespace L3.Cargo.Workstation.Plugins.XRayImageBase
{
	
	/// <summary>An effect that magnifies a circular region.</summary>
	public class MagnifyEffect : ShaderEffect {
		public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(MagnifyEffect), 0);
		public static readonly DependencyProperty CenterProperty = DependencyProperty.Register("Center", typeof(Point), typeof(MagnifyEffect), new UIPropertyMetadata(new Point(0.5, 0.5), PixelShaderConstantCallback(0)));
		public static readonly DependencyProperty RadiusProperty = DependencyProperty.Register("Radius", typeof(double), typeof(MagnifyEffect), new UIPropertyMetadata(((double)(0.25)), PixelShaderConstantCallback(1)));
		public static readonly DependencyProperty MagnificationProperty = DependencyProperty.Register("Magnification", typeof(double), typeof(MagnifyEffect), new UIPropertyMetadata(((double)(2)), PixelShaderConstantCallback(2)));
		public static readonly DependencyProperty AspectRatioProperty = DependencyProperty.Register("AspectRatio", typeof(double), typeof(MagnifyEffect), new UIPropertyMetadata(((double)(1.5)), PixelShaderConstantCallback(4)));
		public MagnifyEffect() {
			PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri(@"/L3.Cargo.Workstation.Plugins.XRayImageBase;component/Effects/Magnify.ps", UriKind.Relative);
			this.PixelShader = pixelShader;

			this.UpdateShaderValue(InputProperty);
			this.UpdateShaderValue(CenterProperty);
			this.UpdateShaderValue(RadiusProperty);
			this.UpdateShaderValue(MagnificationProperty);
			this.UpdateShaderValue(AspectRatioProperty);
		}
		public Brush Input {
			get {
				return ((Brush)(this.GetValue(InputProperty)));
			}
			set {
				this.SetValue(InputProperty, value);
			}
		}
		/// <summary>The center point of the magnified region.</summary>
		public Point Center {
			get {
				return ((Point)(this.GetValue(CenterProperty)));
			}
			set {
				this.SetValue(CenterProperty, value);
			}
		}
		/// <summary>The radius of the magnified region.</summary>
		public double Radius {
			get {
				return ((double)(this.GetValue(RadiusProperty)));
			}
			set {
				this.SetValue(RadiusProperty, value);
			}
		}
		/// <summary>The magnification factor.</summary>
		public double Magnification {
			get {
				return ((double)(this.GetValue(MagnificationProperty)));
			}
			set {
				this.SetValue(MagnificationProperty, value);
			}
		}
		/// <summary>The aspect ratio (width / height) of the input.</summary>
		public double AspectRatio {
			get {
				return ((double)(this.GetValue(AspectRatioProperty)));
			}
			set {
				this.SetValue(AspectRatioProperty, value);
			}
		}
	}
}
