//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace L3.Cargo.Common.Xml.History_1_0
{
    public delegate void CurrentHistoryChanged (HistoryStep step);

    public class StepComparer : IComparer<HistoryStep>
    {
        public int Compare (HistoryStep x, HistoryStep y)
        {
            if (x == null)
            {
                return (y == null) ? 0 : -1;
            }
            else
            {
                return (y == null) ? 1 : x.number.CompareTo(y.number);
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public class Histories
    {
        #region Private Members

        private List<History> historyField;

        #endregion Private Members


        #region Public Members

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("History")]
        public List<History> History
        {
            get
            {
                return this.historyField;
            }
            set
            {
                this.historyField = value;
            }
        }

        #endregion Public Members


        #region Constructors

        public Histories ()
        {
            historyField = new List<History>();
        }

        #endregion Constructors


        #region Public Members

        public History Find (string id)
        {
            foreach (History history in historyField)
            {
                if (string.Compare(history.id, id, true) == 0)
                {
                    return history;
                }
            }

            return null;
        }

        #endregion Public Members
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class History
    {
        #region Private Members

        private ObservableList<HistoryStep> stepField;

        private string idField;

        private StepComparer m_Comparer;

        private string m_DefaultUser;

        #endregion Private Members


        #region Public Members

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Step")]
        public ObservableList<HistoryStep> Step
        {
            get
            {
                return this.stepField;
            }
            set
            {
                this.stepField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        public string DefaultUser
        {
            set
            {
                this.m_DefaultUser = value;
            }
        }

        public event CurrentHistoryChanged CurrentHistoryChangedEvent;

        #endregion Public Members


        #region Constructors

        public History ()
        {
            idField = string.Empty;
            m_DefaultUser = string.Empty;
            stepField = new ObservableList<HistoryStep>();
            m_Comparer = new StepComparer();
        }

        #endregion Constructors


        #region Private Methods

        private void UpdateStep (HistoryStep step)
        {
            stepField.Add(step);
            stepField.Sort(m_Comparer);
        }

        private HistoryStep FindStep (int number)
        {
            HistoryStep historyStep = null;

            foreach (HistoryStep step in stepField)
            {
                if (step.number == number)
                {
                    historyStep = step;
                    break;
                }
            }

            return historyStep;
        }

        #endregion Private Methods


        #region Public Methods

        public void AddStep (HistoryStep step)
        {
            if (step.number >= 0)
            {
                HistoryStep historyStep = FindStep(step.number);

                if (historyStep != null)
                {
                    stepField.Remove(historyStep);
                }
            }
            else
            {
                step.number = stepField.Count;
            }

            UpdateStep(step);
        }

        public void AddStep (HistoryFilter filter)
        {
            HistoryStep step = new HistoryStep();
            step.Filter.Add(filter);
            step.number = stepField.Count;
            step.category = "Filter";
            step.description = filter.name;

            UpdateStep(step);
        }

        public void AddStep (HistoryPseudoColor pseudoColor)
        {
            HistoryStep step = new HistoryStep();
            step.PseudoColor = pseudoColor;
            step.number = stepField.Count;
            step.category = "PseudoColor";
            step.description = pseudoColor.name;

            UpdateStep(step);
        }

        public void AddStep (HistoryBuffer buffer)
        {
            HistoryStep step = new HistoryStep();
            step.Buffer = buffer;
            step.number = stepField.Count;
            step.category = "Buffer";
            step.description = buffer.name;

            UpdateStep(step);
        }

        public void AddStep (HistoryHistogram histogram)
        {
            HistoryStep step = new HistoryStep();
            step.Histogram = histogram;
            step.number = stepField.Count;
            step.category = "Histogram";
            step.description = "Range: " + histogram.start.ToString() + "-" + histogram.end.ToString();

            UpdateStep(step);
        }
		
        public void AddStep (HistoryDualEnergy dualEnergy)
        {
            HistoryStep step = new HistoryStep();
            step.DualEnergy = dualEnergy;
            step.number = stepField.Count;
            step.category = "Dual Energy";
            step.description = dualEnergy.name;

            UpdateStep(step);
        }

        public void SetFirstStep (HistoryFilter filter)
        {
            HistoryStep step = FindStep(0);

            if (step == null)
            {
                step = new HistoryStep();
                step.number = 0;
                step.Filter.Add(filter);
                step.category = "Setup";
                step.description = "Original";

                AddStep(step);
            }
            else
            {
                for (int index = step.Filter.Count - 1; index >= 0; index--)
                {
                    if (string.Compare(filter.name, step.Filter[index].name, true) == 0)
                    {
                        step.Filter.RemoveAt(index);
                        break;
                    }
                }

                step.Filter.Add(filter);
            }
        }

        public void SetFirstStep(HistoryPseudoColor pseudoColor)
        {
            HistoryStep step = FindStep(0);

            if (step == null)
            {
                step = new HistoryStep();
                step.number = 0;
                step.PseudoColor = pseudoColor;
                step.category = "Setup";
                step.description = "Original";

                AddStep(step);
            }
            else
            {
                step.PseudoColor = pseudoColor;
            }
        }

        public void SetFirstStep(HistoryBuffer buffer)
        {
            HistoryStep step = FindStep(0);

            if (step == null)
            {
                step = new HistoryStep();
                step.number = 0;
                step.Buffer = buffer;
                step.category = "Setup";
                step.description = "Original";

                AddStep(step);
            }
            else
            {
                step.Buffer = buffer;
            }
        }

        public void SetFirstStep(HistoryHistogram histogram)
        {
            HistoryStep step = FindStep(0);

            if (step == null)
            {
                step = new HistoryStep();
                step.number = 0;
                step.Histogram = histogram;
                step.category = "Setup";
                step.description = "Original";

                AddStep(step);
            }
            else
            {
                step.Histogram = histogram;
            }
        }

        public void SetFirstStep(HistoryDualEnergy dualEnergy)
        {
            HistoryStep step = FindStep(0);

            if (step == null)
            {
                step = new HistoryStep();
                step.number = 0;
                step.DualEnergy = dualEnergy;
                step.category = "Setup";
                step.description = "Original";

                AddStep(step);
            }
            else
            {
                step.DualEnergy = dualEnergy;
            }
        }
		
        public HistoryStep GetStep ()
        {
            return GetStep(stepField.Count - 1);
        }

        public HistoryStep GetStep (int number)
        {
            HistoryStep step = new HistoryStep();

            for (int index = number; index >= 0; index--)
            {
                if (step.Buffer == null)
                {
                    step.Buffer = stepField[index].Buffer;
                }

                if (step.PseudoColor == null)
                {
                    step.PseudoColor = stepField[index].PseudoColor;
                }

                if (step.Histogram == null)
                {
                    step.Histogram = stepField[index].Histogram;
                }

                if (stepField[index].Filter != null)
                {
                    foreach (HistoryFilter filter in stepField[index].Filter)
                    {
                        bool matchFound = false;

                        foreach (HistoryFilter newFilter in step.Filter)
                        {
                            if (string.Compare(filter.name, newFilter.name, true) == 0)
                            {
                                matchFound = true;
                                break;
                            }
                        }

                        if (!matchFound)
                        {
                            step.Filter.Add(filter);
                        }
                    }
                }

                if (step.DualEnergy == null)
                {
                    step.DualEnergy = stepField[index].DualEnergy;
                }
            }

            return step;
        }

        public void ApplyStep ()
        {
            ApplyStep(stepField.Count - 1);
        }

        public void ApplyStep (int number)
        {
            if (number >= 0 && CurrentHistoryChangedEvent != null)
            {
                HistoryStep step = GetStep(number);

                if (step != null)
                {
                    CurrentHistoryChangedEvent(step);
                }
            }
        }

        #endregion Public Methods
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class HistoryStep
    {
        #region Private Members

        private List<HistoryFilter> filterField;

        private HistoryPseudoColor pseudoColorField;

        private HistoryBuffer bufferField;

        private HistoryHistogram histogramField;

        private HistoryDualEnergy dualEnergyField;

        private int numberField;

        private string categoryField;

        private string descriptionField;

        private DateTime timeField;

        #endregion Private Members


        #region Public Members

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Filter")]
        public List<HistoryFilter> Filter
        {
            get
            {
                return this.filterField;
            }
            set
            {
                this.filterField = value;
            }
        }

        /// <remarks/>
        public HistoryPseudoColor PseudoColor
        {
            get
            {
                return this.pseudoColorField;
            }
            set
            {
                this.pseudoColorField = value;
            }
        }

        /// <remarks/>
        public HistoryBuffer Buffer
        {
            get
            {
                return this.bufferField;
            }
            set
            {
                this.bufferField = value;
            }
        }

        /// <remarks/>
        public HistoryHistogram Histogram
        {
            get
            {
                return this.histogramField;
            }
            set
            {
                this.histogramField = value;
            }
    	}
    
	    /// <remarks/>
	    public HistoryDualEnergy DualEnergy {
	        get {
	            return this.dualEnergyField;
	        }
	        set {
	            this.dualEnergyField = value;
	        }
	    }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int number
        {
            get
            {
                return this.numberField;
            }
            set
            {
                this.numberField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string category
        {
            get
            {
                return this.categoryField;
            }
            set
            {
                this.categoryField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public DateTime time
        {
            get
            {
                return this.timeField;
            }
            set
            {
                this.timeField = value;
            }
        }

        #endregion Public Members


        #region Constructors

        public HistoryStep ()
        {
            filterField = new List<HistoryFilter>();
            pseudoColorField = null;
            bufferField = null;
            histogramField = null;
			dualEnergyField = null;
            numberField = -1;
            categoryField = string.Empty;
            descriptionField = string.Empty;
            DateTime timeField = DateTime.Now;
        }

        #endregion Constructors
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class HistoryFilter
    {
        #region Private Members

        private string nameField;

        private string parameterField;

        private string optparameter1Field;

        #endregion Private Members


        #region Public Members

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string parameter
        {
            get
            {
                return this.parameterField;
            }
            set
            {
                this.parameterField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string optparameter1
        {
            get
            {
                return this.optparameter1Field;
            }
            set
            {
                this.optparameter1Field = value;
            }
        }

        #endregion Public Members
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class HistoryPseudoColor
    {
        #region Private Members

        private string nameField;

        #endregion Private Members


        #region Public Members

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        #endregion Public Members
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class HistoryBuffer
    {
        #region Private Members

        private string nameField;

        #endregion Private Members


        #region Public Members

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        #endregion Public Members
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public class HistoryHistogram
    {
        #region Private Members

        private string effecttypeField;

        private long startField;

        private long endField;

        #endregion Private Members


        #region Public Members

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string effecttype
        {
            get
            {
                return this.effecttypeField;
            }
            set
            {
                this.effecttypeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long start
        {
            get
            {
                return this.startField;
            }
            set
            {
                this.startField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long end
        {
            get
            {
                return this.endField;
            }
            set
            {
                this.endField = value;
            }
        }

        #endregion Public Members
    }
	
	
	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
	public partial class HistoryDualEnergy
	{
		#region Private Members
		
	    private string nameField;
		
		#endregion Private Members
    
	
		#region Public Members
		
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string name {
	        get
			{
	            return this.nameField;
	        }
	        set
			{
	            this.nameField = value;
	        }
	    }
		
		#endregion Public Members
	}
}
